{"ast":null,"code":"import{db}from'./firebase';import{collection,addDoc,query,where,getDocs,doc,updateDoc,orderBy,limit}from'firebase/firestore';import{analyticsService}from'./analytics';class SubscriptionService{async createSubscription(subscriptionData){try{const docRef=await addDoc(collection(db,'subscriptions'),{...subscriptionData,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});// Track subscription creation\nawait analyticsService.trackEvent('subscription_created',{tier:subscriptionData.tier,price:subscriptionData.price,userId:subscriptionData.userId});return{id:docRef.id,...subscriptionData};}catch(error){console.error('Error creating subscription:',error);throw error;}}async getUserSubscriptions(userId){try{const q=query(collection(db,'subscriptions'),where('userId','==',userId),orderBy('createdAt','desc'));const querySnapshot=await getDocs(q);return querySnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));}catch(error){console.error('Error fetching user subscriptions:',error);throw error;}}async getActiveSubscription(userId){try{const q=query(collection(db,'subscriptions'),where('userId','==',userId),where('status','==','active'),orderBy('createdAt','desc'),limit(1));const querySnapshot=await getDocs(q);if(querySnapshot.empty){return null;}const doc=querySnapshot.docs[0];return{id:doc.id,...doc.data()};}catch(error){console.error('Error fetching active subscription:',error);throw error;}}async cancelSubscription(subscriptionId){try{const subscriptionRef=doc(db,'subscriptions',subscriptionId);await updateDoc(subscriptionRef,{status:'cancelled',cancelledAt:new Date().toISOString(),updatedAt:new Date().toISOString()});// Track subscription cancellation\nawait analyticsService.trackEvent('subscription_cancelled',{subscriptionId:subscriptionId});return true;}catch(error){console.error('Error cancelling subscription:',error);throw error;}}async updateSubscriptionStatus(subscriptionId,status){try{const subscriptionRef=doc(db,'subscriptions',subscriptionId);await updateDoc(subscriptionRef,{status:status,updatedAt:new Date().toISOString()});return true;}catch(error){console.error('Error updating subscription status:',error);throw error;}}}export const subscriptionService=new SubscriptionService();","map":{"version":3,"names":["db","collection","addDoc","query","where","getDocs","doc","updateDoc","orderBy","limit","analyticsService","SubscriptionService","createSubscription","subscriptionData","docRef","createdAt","Date","toISOString","updatedAt","trackEvent","tier","price","userId","id","error","console","getUserSubscriptions","q","querySnapshot","docs","map","data","getActiveSubscription","empty","cancelSubscription","subscriptionId","subscriptionRef","status","cancelledAt","updateSubscriptionStatus","subscriptionService"],"sources":["/Users/prakash/Documents/vibe-coding/src/services/subscriptions.js"],"sourcesContent":["import { db } from './firebase';\nimport { collection, addDoc, query, where, getDocs, doc, updateDoc, orderBy, limit } from 'firebase/firestore';\nimport { analyticsService } from './analytics';\n\nclass SubscriptionService {\n  async createSubscription(subscriptionData) {\n    try {\n      const docRef = await addDoc(collection(db, 'subscriptions'), {\n        ...subscriptionData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n\n      // Track subscription creation\n      await analyticsService.trackEvent('subscription_created', {\n        tier: subscriptionData.tier,\n        price: subscriptionData.price,\n        userId: subscriptionData.userId\n      });\n\n      return { id: docRef.id, ...subscriptionData };\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      throw error;\n    }\n  }\n\n  async getUserSubscriptions(userId) {\n    try {\n      const q = query(\n        collection(db, 'subscriptions'),\n        where('userId', '==', userId),\n        orderBy('createdAt', 'desc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching user subscriptions:', error);\n      throw error;\n    }\n  }\n\n  async getActiveSubscription(userId) {\n    try {\n      const q = query(\n        collection(db, 'subscriptions'),\n        where('userId', '==', userId),\n        where('status', '==', 'active'),\n        orderBy('createdAt', 'desc'),\n        limit(1)\n      );\n      \n      const querySnapshot = await getDocs(q);\n      if (querySnapshot.empty) {\n        return null;\n      }\n      \n      const doc = querySnapshot.docs[0];\n      return { id: doc.id, ...doc.data() };\n    } catch (error) {\n      console.error('Error fetching active subscription:', error);\n      throw error;\n    }\n  }\n\n  async cancelSubscription(subscriptionId) {\n    try {\n      const subscriptionRef = doc(db, 'subscriptions', subscriptionId);\n      await updateDoc(subscriptionRef, {\n        status: 'cancelled',\n        cancelledAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n\n      // Track subscription cancellation\n      await analyticsService.trackEvent('subscription_cancelled', {\n        subscriptionId: subscriptionId\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      throw error;\n    }\n  }\n\n  async updateSubscriptionStatus(subscriptionId, status) {\n    try {\n      const subscriptionRef = doc(db, 'subscriptions', subscriptionId);\n      await updateDoc(subscriptionRef, {\n        status: status,\n        updatedAt: new Date().toISOString()\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error updating subscription status:', error);\n      throw error;\n    }\n  }\n}\n\nexport const subscriptionService = new SubscriptionService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}