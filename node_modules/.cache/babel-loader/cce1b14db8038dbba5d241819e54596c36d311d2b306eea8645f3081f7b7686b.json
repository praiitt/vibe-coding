{"ast":null,"code":"import { apiService } from './api';\nimport { analyticsService } from './analytics';\nclass SubscriptionService {\n  async createSubscription(subscriptionData) {\n    try {\n      const response = await apiService.createSubscriptionOrder(subscriptionData.plan);\n\n      // Track subscription creation\n      await analyticsService.trackEvent('subscription_created', {\n        tier: subscriptionData.plan,\n        userId: subscriptionData.userId\n      });\n      return response;\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      throw error;\n    }\n  }\n  async getUserSubscriptions(userId) {\n    try {\n      // This would need to be implemented in the backend\n      // For now, return the user's current subscription from the user object\n      const user = await apiService.getCurrentUser();\n      return user.subscription ? [user.subscription] : [];\n    } catch (error) {\n      console.error('Error fetching user subscriptions:', error);\n      throw error;\n    }\n  }\n  async getActiveSubscription(userId) {\n    try {\n      const user = await apiService.getCurrentUser();\n      return user.subscription && user.subscription.isActive ? user.subscription : null;\n    } catch (error) {\n      console.error('Error fetching active subscription:', error);\n      throw error;\n    }\n  }\n  async cancelSubscription(subscriptionId) {\n    try {\n      // This would need to be implemented in the backend\n      // For now, just track the event\n      await analyticsService.trackEvent('subscription_cancelled', {\n        subscriptionId: subscriptionId\n      });\n      return true;\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      throw error;\n    }\n  }\n  async updateSubscriptionStatus(subscriptionId, status) {\n    try {\n      // This would need to be implemented in the backend\n      return true;\n    } catch (error) {\n      console.error('Error updating subscription status:', error);\n      throw error;\n    }\n  }\n}\nexport const subscriptionService = new SubscriptionService();","map":{"version":3,"names":["apiService","analyticsService","SubscriptionService","createSubscription","subscriptionData","response","createSubscriptionOrder","plan","trackEvent","tier","userId","error","console","getUserSubscriptions","user","getCurrentUser","subscription","getActiveSubscription","isActive","cancelSubscription","subscriptionId","updateSubscriptionStatus","status","subscriptionService"],"sources":["/Users/prakash/Documents/vibe-coding/src/services/subscriptions.js"],"sourcesContent":["import { apiService } from './api';\nimport { analyticsService } from './analytics';\n\nclass SubscriptionService {\n  async createSubscription(subscriptionData) {\n    try {\n      const response = await apiService.createSubscriptionOrder(subscriptionData.plan);\n      \n      // Track subscription creation\n      await analyticsService.trackEvent('subscription_created', {\n        tier: subscriptionData.plan,\n        userId: subscriptionData.userId\n      });\n\n      return response;\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      throw error;\n    }\n  }\n\n  async getUserSubscriptions(userId) {\n    try {\n      // This would need to be implemented in the backend\n      // For now, return the user's current subscription from the user object\n      const user = await apiService.getCurrentUser();\n      return user.subscription ? [user.subscription] : [];\n    } catch (error) {\n      console.error('Error fetching user subscriptions:', error);\n      throw error;\n    }\n  }\n\n  async getActiveSubscription(userId) {\n    try {\n      const user = await apiService.getCurrentUser();\n      return user.subscription && user.subscription.isActive ? user.subscription : null;\n    } catch (error) {\n      console.error('Error fetching active subscription:', error);\n      throw error;\n    }\n  }\n\n  async cancelSubscription(subscriptionId) {\n    try {\n      // This would need to be implemented in the backend\n      // For now, just track the event\n      await analyticsService.trackEvent('subscription_cancelled', {\n        subscriptionId: subscriptionId\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      throw error;\n    }\n  }\n\n  async updateSubscriptionStatus(subscriptionId, status) {\n    try {\n      // This would need to be implemented in the backend\n      return true;\n    } catch (error) {\n      console.error('Error updating subscription status:', error);\n      throw error;\n    }\n  }\n}\n\nexport const subscriptionService = new SubscriptionService();\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,gBAAgB,QAAQ,aAAa;AAE9C,MAAMC,mBAAmB,CAAC;EACxB,MAAMC,kBAAkBA,CAACC,gBAAgB,EAAE;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,UAAU,CAACM,uBAAuB,CAACF,gBAAgB,CAACG,IAAI,CAAC;;MAEhF;MACA,MAAMN,gBAAgB,CAACO,UAAU,CAAC,sBAAsB,EAAE;QACxDC,IAAI,EAAEL,gBAAgB,CAACG,IAAI;QAC3BG,MAAM,EAAEN,gBAAgB,CAACM;MAC3B,CAAC,CAAC;MAEF,OAAOL,QAAQ;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,oBAAoBA,CAACH,MAAM,EAAE;IACjC,IAAI;MACF;MACA;MACA,MAAMI,IAAI,GAAG,MAAMd,UAAU,CAACe,cAAc,CAAC,CAAC;MAC9C,OAAOD,IAAI,CAACE,YAAY,GAAG,CAACF,IAAI,CAACE,YAAY,CAAC,GAAG,EAAE;IACrD,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;EAEA,MAAMM,qBAAqBA,CAACP,MAAM,EAAE;IAClC,IAAI;MACF,MAAMI,IAAI,GAAG,MAAMd,UAAU,CAACe,cAAc,CAAC,CAAC;MAC9C,OAAOD,IAAI,CAACE,YAAY,IAAIF,IAAI,CAACE,YAAY,CAACE,QAAQ,GAAGJ,IAAI,CAACE,YAAY,GAAG,IAAI;IACnF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;EAEA,MAAMQ,kBAAkBA,CAACC,cAAc,EAAE;IACvC,IAAI;MACF;MACA;MACA,MAAMnB,gBAAgB,CAACO,UAAU,CAAC,wBAAwB,EAAE;QAC1DY,cAAc,EAAEA;MAClB,CAAC,CAAC;MAEF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMU,wBAAwBA,CAACD,cAAc,EAAEE,MAAM,EAAE;IACrD,IAAI;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMY,mBAAmB,GAAG,IAAIrB,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}